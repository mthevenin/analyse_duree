---
title: "Tests de comparaison"
---



Les tests d'égalités des fonctions de survie entre différentes valeurs d'une covariable sont calculés à partir de la méthode de Kaplan Meier.  
<BR>
L'utilisation du test correspond à la nécessité de déterminer si une même distribution gouverne les évènements observés dans les différentes  strates.  
Attention: pas de test possibles sur des variables continues. Prévoir des regroupements pour les transformer en variable ordinale.  
<BR>
Deux méthodes sont utilisées:  

* La plus ancienne et la plus diffusée: test sur les rangs (tests dits du **log-rank**). 
* Plus récente et moins difusée: comparaison des **RMST** (*Restricted Mean of Survival Time*).

<br>

# Tests du log-rank

Il s'agit d'une série de tests qui répondent à la même logique, la seule différence réside dans le poids accordé au début ou à la fin de la période d'observation. Par ailleurs ces différents tests sont plus ou moins sensibles à la distribution des censures à droites entre les sous échantillons.  
<br>
Ces tests entrent dans le cadre des tests du Khi2, même si formellement ils relèvent des techniques dites de rang.     
Il s'agira donc de comparer des effectifs observés à des effectifs espérés à chaque temps d'évènement. La principale différence réside dans le calcul de la variance de la statistique du test qui, ici, suit une loi hypergéométrique.  

**Principe de calcul des effectifs - évènements - observés et espérés pour deux groupes**

* **Effectifs observés en $t_i$**: $o_{i1}$ et $o_{i2}$ sont égaux à $d_{i1}$ et $d_{i2}$, et leur somme pour tous les temps d'évènement à $O_1$ et $O_2$.
* **Effectifs expérés** (hypothèse nulle $H_0$): comme pour une statistique du $\chi^2$ on se base sur les marges, avec le risque set ($R_i$) en $t_i$ pour dénombrer les effectifs, soit $e_{i1}=R_{i1}\times\frac{d_i}{R_i}$ et $e_{i2}=R_{i2}\times\frac{d_2}{R_2}$. Leur somme pour tous les temps d'évènement est égale à $E_1$ et $E_2$. Le principe de calcul des effectifs observés reposent donc  sur l'hypothèse d'un rapport des risques toujours égal à 1 au cours du temps (*hypothèse fondamentale de risques proportionnels*).
* **Statistique du log-rank**: $(O_1 - E_1) = -(O_2 - E_2)$. 
* **Statistique de test**: sous $H_0$, $\frac{(O_1 - E_1)^2}{\sum{v_i}}$, avec $v_i$ la variance de $(o_{i1} - e_{i2})$, suis un $\chi^2(1)$.
Si on teste la différence de $g$ fonctions de survie, la statistique de test suis un $\chi^2(g-1)$.  

<br>
**Les principaux tests de type log-rank**  

Le principe de construction des effectifs observés et espérés reste le même dans chaque test, les différences résident dans les pondérations ($w_i$) qui prennent en compte, de manière différente, la taille de la population soumise au risque à chaque durée où au moins un évènement est observé.    
<br>

* **Test du log-rank**: $w_i=1$  
  Il accorde le même poids à toutes les durées d'évènement. C'est le test standard, le plus utilisé. 
* **Test de Wilconxon-Breslow-Grehan**: $w_i=R_i$    
  Les écarts entre effectifs observés et espérés sont pondérés par la population soumise à risque en $t_i$. Le test accorde plus de poids au début de la période analysée, et il est sensible aux différences de distributions entre les strates des observations censurées.
* **Test de Tarone-Ware**: $w_i=\sqrt{R_i}$   
  Variante du test précédent, il atténue le poids accordé aux évènements au début de la période d'observation. Il est par ailleurs moins sensible au problème de la distribution des censures entre les strates. 
* **Test de Peto-Peto** : $w_i=S_i$  
  La pondération est une variante de la fonction de survie KM (avec $R_i=R_i+1$). Le test n'est pas sensible au problème de distribution des censures. 
* **Test de Fleming-Harington**: $w_i=(S_i)^p\times(1-S_i)^{q}$ avec $0\leq{p}\leq{1}$ 
  Il permet de paramétrer le poids accordé au début où à la fin de temps d'observation. Si $p=q=0$ on retrouve le test du log-rank.    
  
<br>

**En pratique/remarques**:  

*	Les tests du log-rank sont sensibles à l’hypothèse de risques proportionnels (voir **modèle semi-paramétrique de Cox**). En pratique si des courbes de séjours se croisent, il est déconseillé de les utiliser. Cela ne signifie pas que si les courbes ne se croisent pas, l’hypothèse de proportionnalité des risques est respectée : des rapports de risque peuvent au cours du temps s’accentuer, se réduire ou le cas échant s’inverser (typique d’un croisement).
*	Effectuer un test global (multiple/omnibus) sur un nombre important de groupes (ou >2) peut rendre le test très facilement significatif. Il peut être intéressant de tester des courbes deux à deux (idem qu’une régression avec covariable discrète), en conservant un seul degré de liberté. Des méthodes de correction du test multiple sont possibles. 

## R-Stata-Sas-Python   
  
  
::: panel-tabset

### R 

On utilise la fonction **`survdiff`** de la librairie `survival`. Le résultat du test de Peto-Peto est affiché par défaut (`rho=1`). Si on souhaite utiliser le test non pondéré, on ajoute l’option `rho=0`. Pour obtenir le résultat d'un test multiple corrigé (plus d’un degré de liberté), on peut utiliser la fonction **`pairwise_survdiff`** de la librairie **`survminer`**. Cette fonction permet d'obtenir des tests 2 à 2 si une variable a plus de deux groupes.

#### Stata 

On utilise la commande **`sts test`** avec le nom de la version du test: `peto`, `wilcoxon` . Sans préciser le nom de la variante, le test non pondéré est exécuté.

### Sas

Le test non pondéré et la version Wilcoxon sont données avec l’option **`strata`** de la `proc lifetest`. Attention : ne jamais utiliser la version *LR Test* qui est biaisée. Pour obtenir d’autres versions du test du log-rank, on ajoute **`/test=all`** à l’option `strata`.


### Python

Avec la librairie `lifelines`, on utilise la fonction **`logrank_test`**. Quatre variantes sont disponibles (Wilcoxon, Tarone-Ware, Peto-Peto et Fleming-Harrigton). On peut également utiliser la fonction **`duration.survdiff`** de `statmodels` (non pondéré, Wilcoxon - appelé ici Breslow- et Tarone-Ware).  

:::

## Application 

On compare ici l'effet du pontage sur le risque de décéder depuis l'inscription dans le registre de greffe. 

![](images/Image9.png)

```{r eval=FALSE}
Log-rank test for equality of survivor functions

        |   Events         Events
surgery |  observed       expected
--------+-------------------------
0       |        69          60.34
1       |         6          14.66
--------+-------------------------
Total   |        75          75.00

              chi2(1) =       6.59
              Pr>chi2 =     0.0103


Wilcoxon (Breslow) test for equality of survivor functions

        |   Events         Events        Sum of
surgery |  observed       expected        ranks
--------+--------------------------------------
0       |        69          60.34          623
1       |         6          14.66         -623
--------+--------------------------------------
Total   |        75          75.00            0

              chi2(1) =       8.99
              Pr>chi2 =     0.0027


Tarone-Ware test for equality of survivor functions

        |   Events         Events        Sum of
surgery |  observed       expected        ranks
--------+--------------------------------------
0       |        69          60.34    73.111827
1       |         6          14.66   -73.111827
--------+--------------------------------------
Total   |        75          75.00            0

              chi2(1) =       8.46
              Pr>chi2 =     0.0036


Peto-Peto test for equality of survivor functions

        |   Events         Events        Sum of
surgery |  observed       expected        ranks
--------+--------------------------------------
0       |        69          60.34    6.0529913
1       |         6          14.66   -6.0529913
--------+--------------------------------------
Total   |        75          75.00            0

              chi2(1) =       8.66
              Pr>chi2 =     0.0033
```


Les résultats font apparaître que l’opération permet d’allonger la durée de survie des personnes.  


# Comparaison des RMST 

<br>

**RMST**: *Restricted Mean of Survival Time*  
<br>

La comparaison des RMST est une alternative pertinente aux tests du log-rank car elle ne repose pas sur des hypothèses contraignantes (proportionnalité des risques, distribution des censures), et permet une lecture vivante basée sur des espérances de séjour et non sur la lecture d’une simple p-value traduisant l’homogénéité ou non des fonctions de séjour. Par ailleurs les comparaisons sont souples, on peut choisir un ou plusieurs points d’horizon pour alimenter l’analyse.  

<br>

**Principe**  

*	L’aire sous la fonction de survie représente la durée moyenne d’attente de l’évènement, soit l’espérance de survie à l’évènement. On est très proche d’une mesure en analyse démographique type « espérance de vie partielle ».
* En présence de censure à droite, il faut borner la durée maximale $t^*<\infty$. L'espérance de survie s'interprète donc sur un horizon fini. 
* $RMST =\int_0^{t^*}S(t)dt$. 
* On peut facilement comparer les RMST de deux groupes, en termes de différence ou de ratio. 
* Par défaut on définit généralement $t^*$ à partir le temps du dernier évènement observé.  Il est néanmoins possible de calculer le RMST sur des intervalles plus court, ce qui lui permet une véritable souplesse au niveau de l’analyse. 



## R-Stata-Sas-Python   
  
::: panel-tabset

### R  

Librairie **`SurvRm2`**. Programmée par les mêmes personnes que la commande Stata, la fonction proposée n'est pas très souple.

### Stata

Commande externe **`strmst2`**. La plus ancienne fonction proposée par les logiciels. Au final plus limitée que la solution Sas. J’ai programmé une commande, `diffrmst`, qui représente graphiquement les estimations des Rmst pour chaque temps d’évènement, leurs différences et les p-value issues des comparaisons. 


### SAS 

Disponible depuis la version 15.1 de SAS/Stat (fin 2018). Les estimations et le résultat du test de comparaison sont récupérables très simplement dans une `proc lifetest`, avec en option **`plots=(rmst)**` . Bien que sortie tardivement par rapport Stata et R, les résultats sont particulièrement complets.


### Python

Estimation un peu pénible. A partir de l'estimateur KM obtenu avec la fonction `KaplanMeierFitter` de `lifelines`, on peut obtenir les RMST avec la fonction  `restricted_mean_survival_time`. 
On peut tracer les focntions, en revanche le test de comparaison n'est pas implémenté.

:::

## Application


```{r eval=FALSE}
Restricted Mean Survival Time (RMST) by arm
-----------------------------------------------------------
   Group |  Estimate    Std. Err.      [95% Conf. Interval]
---------+-------------------------------------------------
   arm 1 |   734.758     133.478      473.145      996.370
   arm 0 |   310.169      43.158      225.581      394.757
-----------------------------------------------------------

Between-group contrast (arm 1 versus arm 0) 
------------------------------------------------------------------------
           Contrast  |  Estimate       [95% Conf. Interval]     P>|z|
---------------------+--------------------------------------------------
RMST (arm 1 - arm 0) |   424.589      149.641      699.537      0.002
RMST (arm 1 / arm 0) |     2.369        1.513        3.710      0.000
------------------------------------------------------------------------
```

Ici $t^*$ est égal à 995 jours, soit la durée qui correspond au dernier décès observé lorsqu'une personne a été opérée pour un pontage (surgery=1).  
Sur un horizon de 995 jours, ces individus peuvent espérer vivre 735 jours en moyenne, contre 310 jours pour les autres.  La durée moyenne de survie est donc deux fois plus importante pour les personnes opérées d'un pontage (rapport des Rmst = 2.3 ), soit une différence de 424 jours.

*Rmst et différences de Rmst à tous les points d'évènement jusqu'à $tmax$*

```{r eval=FALSE}
  +--------------------------------------------------------------------------+
  | _time     _rmst1     _rmst0      _diff          _l         _u         _p |
  |--------------------------------------------------------------------------|
  |     1          1          1          0           0          0          . |
  |     2          2   1.989011    .010989     .010989    .010989          . |   
  |     3          3   2.945055   .0549451   -.0196757   .1295658   .1489731 |
  |     5          5   4.791209   .2087912    .0256584   .3919241   .0254456 |
  |   5.1        5.1   4.882418   .2175824    .0240373   .4111275   .0275679 |
  |--------------------------------------------------------------------------|
  |     6          6   5.693407   .3065934    .0643487   .5488381   .0131162 |
  |     8          8   7.451648   .5483516    .1860869   .9106163   .0030096 |
  |     9          9    8.31978   .6802198    .2523926   1.108047   .0018318 |
  |    11         11   10.03407    .965934    .4072903   1.524578   .0007017 |
  |    12         12   10.89121   1.108791    .4836155   1.733967   .0005087 |
  |--------------------------------------------------------------------------|
  |    16         16   14.27525   1.724747    .8259398   2.623554   .0001692 |
  |    17         17   15.08787   1.912131    .9277063   2.896555   .0001407 |
  |    18         18   15.88935   2.110646     1.05301   3.168283   .0000918 |
  |    21         21   18.26041   2.739589    1.458002   4.021176   .0000279 |
  |    28         28   23.63703   4.362966    2.526501   6.199431   3.22e-06 |
  |--------------------------------------------------------------------------|
  |    30         30   25.15095   4.849051    2.842812    6.85529   2.17e-06 |
  |    31         31   25.89677   5.103226    3.014868   7.191583   1.67e-06 |
  |    32         32    26.6426     5.3574    3.186886   7.527915   1.31e-06 |
  |    35         35   28.84618   6.153824    3.736433   8.571216   6.06e-07 |
  |    36         36    29.5694     6.4306    3.929635   8.931564   4.67e-07 |
  |--------------------------------------------------------------------------|
  |    37         37   30.28132   6.718675    4.135427   9.301923   3.44e-07 |
  |    39         39   31.68257   7.317427    4.569757    10.0651   1.79e-07 |
  |    40         40   32.37189   7.628103    4.797789   10.45842   1.28e-07 |
  |    43         43   34.37207   8.627934    5.552385   11.70349   3.83e-08 |
  |    45         45   35.68291    9.31709     6.07508    12.5591   1.77e-08 |
  |--------------------------------------------------------------------------|
  |    50         50   38.90352   11.09648    7.431942   14.76102   2.94e-09 |
  |    51         51   39.53634   11.46366    7.711818    15.2155   2.12e-09 |
  |    53         53   40.77938   12.22061    8.298259   16.14297   1.02e-09 |
  |    58         58   43.83049   14.16951     9.81571   18.52331   1.79e-10 |
  |    61         61   45.62725   15.37275    10.75502   19.99047   6.81e-11 |
  |--------------------------------------------------------------------------|
  |    66         66   48.56535   17.43465    12.37503   22.49426   1.44e-11 |
  |    68         68   49.71799   18.28201    13.04371    23.5203   7.90e-12 |
  |    69         69   50.27171   18.72829    13.40325   24.05333   5.45e-12 |
  |    72         72   51.89897   20.10103    14.51838   25.68369   1.70e-12 |
  |    77         77   54.49805   22.50194    16.49285   28.51104   2.14e-13 |
  |--------------------------------------------------------------------------|
  |    78         78   55.00657   22.99343    16.89797   29.08889   1.43e-13 |
  |    80         80   56.00101   23.99899    17.73478   30.26321   5.97e-14 |
  |    81         81   56.48692   24.51307    18.16526   30.86089   3.77e-14 |
  |    85         85   58.38539   26.61461    19.93458   33.29464   5.77e-15 |
  |    90         90   60.70197   29.29803     22.1984   36.39766   6.66e-16 |
  |--------------------------------------------------------------------------|
  |    96         96   63.41406   32.58594    24.97681   40.19506          0 |
  |   100        100   65.17693   34.82308    26.87198   42.77418          0 |
  |   102        102   66.03575   35.96425    27.84368   44.08482          0 |
  |   109        109   68.96255   40.03745    31.32724   48.74766          0 |
  |   110        110   69.38067   40.61933    31.82339   49.41528          0 |
  |--------------------------------------------------------------------------|
  |   131        131   77.91717   53.08283    42.46146    63.7042          0 |
  |   149        149   85.23417   63.76583    51.49939   76.03227          0 |
  |   153        153   86.81235   66.18765    53.54893   78.82638          0 |
  |   165        165    91.4034    73.5966    59.87845   87.31474          0 |
  |   180   178.6364   97.14223   81.49413    51.34782   111.6404   1.17e-07 |
  |--------------------------------------------------------------------------|
  |   186   184.0909   99.43776   84.65315    53.34505   115.9613   1.16e-07 |
  |   188   185.7273   100.2029   85.52434    53.56977   117.4789   1.56e-07 |
  |   207   201.2727   107.2376    94.0351    58.18815   129.8821   2.73e-07 |
  |   219   211.0909   111.5325   99.55843    61.16676   137.9501   3.72e-07 |
  |   263   247.0909   126.7373   120.3536    72.25138   168.4559   9.40e-07 |
  |--------------------------------------------------------------------------|
  |   265   248.7273   127.4037   121.3235    72.75741   169.8897   9.77e-07 |
  |   285   265.0909   134.0682   131.0227    77.89536   184.1501   1.34e-06 |
  |   308   283.9091   141.1427   142.7664    84.36629   201.1664   1.66e-06 |
  |   334   305.1818   148.8068    156.375    91.96277   220.7872   1.95e-06 |
  |   340   310.0909   150.4986   159.5923    93.78695   225.3977   2.00e-06 |
  |--------------------------------------------------------------------------|
  |   342   311.7273   151.0369   160.6904    94.42397   226.9568   2.01e-06 |
  |   370   332.0909   158.5728   173.5181    93.67896   253.3572   .0000205 |
  |   397   351.7273   165.8396   185.8876    98.91358   272.8617    .000028 |
  |   427   373.5454   173.9138   199.6316    104.6545   294.6087   .0000379 |
  |   445   386.6364   178.7584    207.878    108.0686   307.6874   .0000446 |
  |--------------------------------------------------------------------------|
  |   482   413.5454   188.7166   224.8289    115.0297   334.6281   .0000599 |
  |   515   437.5454   197.5982   239.9472    121.1866   358.7078    .000075 |
  |   545   459.3636   205.6725   253.6912    126.7507   380.6316   .0000897 |
  |   583        487   215.8998   271.1002    133.7623    408.438   .0001093 |
  |   596   494.8788   219.3987   275.4801    134.5264   416.4339   .0001279 |
  |--------------------------------------------------------------------------|
  |   620   509.4243    225.858   283.5662    136.4692   430.6632   .0001579 |
  |   670   539.7273   239.3151   300.4122    140.0713   460.7531   .0002405 |
  |   675   542.7576   240.6608   302.0968    140.4026   463.7909   .0002504 |
  |   733   577.9091   254.9701    322.939    145.3689    500.509   .0003645 |
  |   841   643.3636   279.1928   364.1708    155.9437   572.3979   .0006085 |
  |--------------------------------------------------------------------------|
  |   852   650.0303   281.6599   368.3704    156.9483   579.7925    .000638 |
  |   915   688.2121   294.2198   393.9923    164.2457   623.7389   .0007762 |
  |   941   703.9697   299.4033   404.5664    167.1596   641.9732   .0008378 |
  |   979        727   306.9791   420.0209    171.3309   668.7109   .0009321 |
  |   995   734.7576   310.1689   424.5887    149.6407   699.5366   .0024726 |
  +--------------------------------------------------------------------------+
```



![](images/image9rmst.png){width=70%}
