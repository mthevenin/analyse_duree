---
filters:
  - lightbox
lightbox: auto

jupyter: python3
---


::: callout-note

- Le document qui suit n'est qu'un programme fait il y a 3-4 ans. Utilisant très peu Python, je n'ai pas documenté les fonctions, plus ou moins obsures, qui ont été utilisées.
- L'exécution a été réalisé le noyau `python3` de jupyter.
- Le document n'a pas été compilé en PDF, seule cette version html est disponible.

:::


# **Python**


Deux paquets d'analyse: principalement `lifelines` (km, cox, aft...) et `statsmodels``` (estimation logit en temps discret, kaplan-Meier, Cox).


Le package ```statsmodels``` est également ne mesure d'estimer des courbes de séjour de type Kaplan-Meier et des modèles à risque proportionnel de Cox. Le package ```lifelines``` couvre la quasi totalité des méthodes standards, à l'exception des les risques concurrents.  
 
 
```{python}
import numpy  as np
import pandas as pd
import patsy  as pt
import lifelines as lf
import matplotlib.pyplot as plt
import statsmodels as sm
```


Chargement de la base

```{python}
trans = pd.read_csv("https://raw.githubusercontent.com/mthevenin/analyse_duree/master/bases/transplantation.csv")

trans.head(10)
trans.info()
```

## Package lifelines

**Documentation**: <https://lifelines.readthedocs.io/en/latest/>


### Non Paramétrique: Kaplan Meier

**Estimateur KM et durée médiane**

```{python}
T = trans['stime']
E = trans['died']


from lifelines import KaplanMeierFitter
kmf = KaplanMeierFitter()
kmf.fit(T,E)
print(kmf.survival_function_)
a = "DUREE MEDIANE:"
b = kmf.median_survival_time_
print(a,b)
```


```{python}
kmf.plot()
```


**Comparaison des fonctions de survie**

```{python}
ax = plt.subplot(111)
kmf = KaplanMeierFitter()
for name, grouped_df in trans.groupby('surgery'):
    kmf.fit(grouped_df['stime'], grouped_df['died'], label=name)
    kmf.plot(ax=ax)
```




```{python}
from lifelines.statistics import multivariate_logrank_test
results = multivariate_logrank_test(trans['stime'], trans['surgery'], trans['died'])
results.print_summary()
```



## Semi paramétrique: Cox

### Estimation

```{python}
model = 'year + age + C(surgery) -1'
X = pt.dmatrix(model, trans, return_type='dataframe')
design_info = X.design_info
YX = X.join(trans[['stime','died']])
YX.drop(['C(surgery)[0]'], axis=1, inplace=True)
YX.head()


from lifelines import CoxPHFitter
cph = CoxPHFitter()
cph.fit(YX, duration_col='stime', event_col='died')
cph.print_summary()
cph.plot()
```



### Tests hypothèse PH

**Test PH: Schoenfeld Méthode 1**

```{python}
cph.check_assumptions(YX,p_value_threshold=0.05)
```


**Test PH: Schoenfeld Méthode 2**
```{python}
from lifelines.statistics import  proportional_hazard_test 
zph = proportional_hazard_test(cph, YX, time_transform='all')
zph.print_summary()
```


**Test PH: intéraction**

```{python}
from lifelines.utils import to_episodic_format
from lifelines import CoxTimeVaryingFitter
```

*Transformation de la base YX*
```{python}
long = to_episodic_format(YX, duration_col='stime', event_col='died')
```


*Création de la variable d'intéraction*
```{python}
long['surgery_t'] = long['C(surgery)[1]'] * long['stop']
```

*Estimation*
```{python}
ctv = CoxTimeVaryingFitter()
ctv.fit(long,
        id_col='id',
        event_col='died',
        start_col='start',
        stop_col='stop',)
ctv.print_summary(4)
```



### Variable dynamique binaire

## Modèle à temps discret

### Ajustement continu

Modèle logistique estimé avec le paquet ```statsmodel```. La fonction ```to_episodic_format``` de ```lifelines``` permet de mettre en forme la base.  
Pour la  durée, on utilisera ici la variable **mois** (regroupement de stime par intervalle de 30 jours).

```{python}
import statsmodels.formula.api as smf #type R formule => ce qu'on utilisera#
import statsmodels.api as sm #type python#
```

**Transformation de la base en format long**

```{python}
td = pd.read_csv("https://raw.githubusercontent.com/mthevenin/analyse_duree/master/bases/transplantation.csv")
td.drop(['id'], axis=1, inplace=True)
td['dur'] = td['mois']
td = to_episodic_format(td, duration_col='mois', event_col='died')
```

**Evaluation de l'ajustement avec des fonctions quadratiques**  


```{python}
td['t2'] = td['stop']**2
td['t3'] = td['stop']**3
fit1 = smf.glm(formula=  "died ~ stop", data=td, family=sm.families.Binomial()).fit()
fit2 = smf.glm(formula=  "died ~ stop + t2", data=td, family=sm.families.Binomial()).fit()
fit3 = smf.glm(formula=  "died ~ stop + t2 + t3", data=td, family=sm.families.Binomial()).fit()
```

**Comparaison des AIC**
```{python}
print("AIC pour ajustement t1")
print(fit1.aic)
print("AIC pour ajustement durée t1 + t2")
print(fit2.aic)
print("AIC pour ajustement durée t1 + t2 + t3")
print(fit3.aic)
```


**Estimation du modèle**
```{python}
tdfit = smf.glm(formula=  "died ~ stop + t2 + t3 + year + age + surgery", data=td, family=sm.families.Binomial()).fit()
tdfit.summary()
```


### Ajustement discret

*Création des intervalles pour l'exemple (quantile de la durée en mois)*

```{python}
td['ct4'] = pd.qcut(td['stop'],[0, .25, .5, .75, 1.]) 
td['ct4'].value_counts(normalize=True)*100
td.ct4 = pd.Categorical(td.ct4)
td['ct4'] = td.ct4.cat.codes
```



Pour chaque individu, on conserve une seule observation par intervalle.

```{python}
td2 = td 
td2['t'] = td2['ct4']
td2 = td2.sort_values(['id', 'stop'])
td2 =  td2.groupby(['id','ct4']).last()
```


**Estimation**

```{python}
td2fit = smf.glm(formula=  "died ~ C(t) +  year + age + surgery", data=td2, family=sm.families.Binomial()).fit()
td2fit.summary()
```


## Modèle paramétrique de type AFT

```{python}
from lifelines import WeibullAFTFitter, LogLogisticAFTFitter
```

**Weibull**

```{python}
aftw = WeibullAFTFitter()
aftw.fit(YX, duration_col='stime', event_col='died')
aftw.print_summary()
```


**Loglogistique**

```{python}
aftl = LogLogisticAFTFitter()
aftl.fit(YX, duration_col='stime', event_col='died')
aftl.print_summary()
```


# Package statsmodels


https://www.statsmodels.org/dev/duration.html

Le package permet d'estimer des fonction de séjour de type Kaplan-Meier et des modèles de Cox.

## Kaplan-Meier

```{python}
km = sm.SurvfuncRight(trans["stime"], trans["died"])
km.summary()
```
 


Les test du log-rank sont disponibles avec la fonction ```survdiff``` (nom idem R). Au niveau graphique, la programmation semble un peu
lourde et mériterait d'être simplifiée (donc non traitée).  

**Comparaison de S(t) à partir des tests du log-rank**  

<br>
Résultat: (statistique de test, p-value)

*Test non pondéré*

```{python}
sm.duration.survdiff(trans.stime, trans.died, trans.surgery)

```

*Breslow*

```{python}
sm.duration.survdiff(trans.stime, trans.died, trans.surgery, weight_type='gb')

```

*Tarone-Ware*

```{python}
sm.duration.survdiff(trans.stime, trans.died, trans.surgery, weight_type='tw')
```

## Modèle de Cox

```{python}
mod = smf.phreg("stime ~  year + age + surgery ",trans, status='died', ties="efron")
rslt = mod.fit()
print(rslt.summary())
```






