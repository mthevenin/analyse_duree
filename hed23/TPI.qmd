---
title: "Introduction à l'analyse Biographique des durées avec R "
subtitle: "Correction TPI: analyse sorties du premier emploi"
title-block-banner: "#034E79"
date: today

author:
  - name: "Marc Thevenin"
    url: https://github.com/mthevenin
    affiliation: Institut National d'Etudes Démographiques
    affiliation-url: https://www.ined.fr/
format:
  html: 
   self-contained: true
   highlight-style: github
   code-block-bg: true
   code-block-border-left: "#31BAE9"
   number-sections: true
   toc: true   
   code-tools:
     source: true
     toggle: false
     caption: "source"
   code-copy: true
   code-summary: "Show the code" 
   css: styles.css
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, render = knitr::normal_print)
```

```{r}
options(scipen=999)  # empêcher le format scientifique
options(show.signif.stars=FALSE)
```

# Packages

**Analyse standard**    
Le package `survival` permet de réaliser un grand nombre d'analyses des durées pour un évènement unique (risques non concurrents et non récurrent): **Kaplan Meier**, **modèles semiparamétrique** (Cox), **modèle paramétriques**......  


**Analyse à durée discrète/groupée**  
Pour les modèles à durée discrète/groupée, on utilisera la fonction `glm`,  intégrée à R. La fonction ```uncount``` du package `tydir` permet d'allonger, si nécessaire, la base en format long. La fonction ```survsplit``` du package peut, sous certaines conditions, réaliser cette opération.  


**Amélioration des outputs **  

* Graphique: Pour l'esthétique, on peut également utiliser le package `survminer` (ex: fonction de survie de type ggplot2 et présentation des risk-ratio après un modèle de Cox). Le package `survminer` permet aussi de faire des tests du log-rank qui comparent des fonctions de survie 2 à 2 à partir de variables à plus de deux modalités.

* Outputs:
  - **jtools**: pour les modèles estimés avec la fonction glm (modèles à temps discret) ou coxph: package `RecordLinkage`, et fonction `summ` du package `jtools`. Pas d'utilisation possible pour la fonction `multinom` (risque concurrent avec un modèle logistique multinomial). 
  - **gtsummary**: fonction **`tlb_regression`**, très répandue. Permet de sortir un output pour le modèle multinomial, mais en format long,

**Installation des packages**

```{r, message=FALSE, warning=FALSE}
#install.packages("survival")
#install.packages("survminer")
#install.packages("survRM2")
#install.packages("rms")
#install.packages("tidyr")
#install.packages("gtools")
#install.packages("jtools")
#install.packages("RecordLinkage")
#install.packages("gtsummary")
#install.packages("cmprsk")
#install.packages("nnet")

library(survival)
library(survminer)
library(survRM2)
library(tidyr)
library(gtools)
library(jtools)
library(RecordLinkage)
library(gtsummary)
library(cmprsk)
library(nnet)
```

# La base et la construction des variables d'analyse

## La base 

Base **tp_activite**: Analyse de la durée de la **première séquence d'emploi(s)** de femmes nées avant 1951.  


```{r}
act <- read.csv("D:/D/Marc/SMS/FORMATIONS/2022/Durée2/tp/bio et entourage/sortie emploi [tp strasbourg]/tp_activite.csv")
```


Il s'agit de la base "prête à l'analyse. A l'origine les données sont dans une base en format *âges-séquences* qui a du être mise en forme. Un programme de mise en forme, avec étapes prudentes, est donné à la fin du document.  

**Variables**  


+---------------+-----------------------------------------------------+
| Variable      |                                                     |
+===============+=====================================================+
| **ident**     | Identifiant de la personne                          |
+---------------+-----------------------------------------------------+
| **diplome**   | Niveau de diplôme                                   |
|               |                                                     |
|               | -   1 = inférieur au bac                            |
|               |                                                     |
|               | -   2 = bac                                         |
|               |                                                     |
|               | -   3 = supérieur au bac                            |
+---------------+-----------------------------------------------------+
| **gene**      | Génération                                          |
|               |                                                     |
|               | -   1 = avant 1940                                  |
|               |                                                     |
|               | -   2 = 1940-1940                                   |
|               |                                                     |
|               | -   3 = 1945-1950                                   |
+---------------+-----------------------------------------------------+
| **csp**       | Csp représentative                                  |
|               |                                                     |
|               | -   artisane ou agricultrice                        |
|               |                                                     |
|               | -   cadre                                           |
|               |                                                     |
|               | -   employée                                        |
|               |                                                     |
|               | -   ouvrière                                        |
|               |                                                     |
|               | -   profession intermédiaire                        |
+---------------+-----------------------------------------------------+
| **enf**       | Avoir eu un enfant pendant la période d'observation |
|               |                                                     |
|               | -   0: non                                          |
|               |                                                     |
|               | -   1: oui                                          |
+---------------+-----------------------------------------------------+
| **typinact**  | type de sortie de l'emploi                          |
|               |                                                     |
|               | -   0: pas de sortie de l'emploi                    |
|               |                                                     |
|               | -   inactivité-retour au foyer                      |
|               |                                                     |
|               | -   Autres (chômage, maladie...)                    |
+---------------+-----------------------------------------------------+
| **aanenf**    | Age à la de naissance de l'enfant                   |
|               |                                                     |
|               | -   0: pas d'enfant                                 |
|               |                                                     |
|               | -   Age à la naissance                              |
+---------------+-----------------------------------------------------+
| **ageact**    | Age au premier emploi                               |
+---------------+-----------------------------------------------------+
| **ageinact**  | Age à la sortie de l'emploi                         |
|               |                                                     |
|               | -   0: pas de sortie de l'emploi                    |
|               |                                                     |
|               | -   Age à la sortie                                 |
+---------------+-----------------------------------------------------+
| **ageret**    | Age à la retraite                                   |
|               |                                                     |
|               | -   0: pas à la retraite au moment de l'enquête     |
|               |                                                     |
|               | -   Age à la retraite                               |
+---------------+-----------------------------------------------------+
| **age_enq**   | Age au moment de l'enquête                          |
+---------------+-----------------------------------------------------+

## Construction des variables d'analyse

**Variable censure-évènement**

```{r}
act$d = ifelse(act$ageinact>0, 1, 0)
```

**Variable de durée**

Rappel sur la notion de censure: la durée d'observation est inférieure à la durée d'exposition au risque.  
Ici, on doit aussi prendre en compte la situation inverse. Des femmes ont toujours occupé un emploi et sont sorties du marché du travail uniquement au moment de la retraite. On ne peut plus les considérer comme exposées au risque après la retraite sinon la durée d'observation est supérieure à la durée d'exposition. On peut confondre ces situations comme des censures à droite (0) si on suppose que l'âge à la prise de la retraite n'est pas informative. Quelque part on fait une hypothèse d'indépendance entre le passage à la retraite et les autres causes de sorties. Potentiellement discutable, mais le passage à la retraite va se situer a des âges plutôt élevé.

Principe:  

* Le début de l'exposition au risque est *ageact* 
* On doit calculer la fin de l'exposition: sortie de l'emploi hors retraite , à la retraite ou simplement sortie de l'observation avec une censure à droite (âge à  l'enquête).
* On calcule la durée. Avec des données discrètes/groupées, je prends toute la longueur de la durée et non la simple différence entre 2 points: fin - début + 1. On évite d'observer des évènements avec $t=0$ et on facilite certaines manipulations, en particulier celles relatives aux covariables non fixes issues d'autres bases biographiques.

```{r}
act$fin = ifelse(act$d==1, act$ageinact, ifelse(act$ageret>0, act$ageret, act$age_enq))
act$dur = act$fin - act$ageact + 1 
```


# Analyse non paramétrique: Kaplan Meier et tests du log-rank

## Estimation

**Fonctions ```survfit``` ```survdiff```**

```{r}
km = survfit(Surv(dur,d)~1, data=act)
summary(km) 
km
plot(km)
ggsurvplot(km, risk.table=TRUE, ggtheme=theme_light(),)
```


## Comparaison de fonctions de survie


**Niveau de diplome**
```{r}
km = survfit(Surv(dur,d)~diplome, data=act)
# summary(km) 
km
plot(km)
ggsurvplot(km, ggtheme=theme_light(),)
```

**CSP**
```{r}
km = survfit(Surv(dur,d)~csp, data=act)
# summary(km) 
km
plot(km)
ggsurvplot(km, ggtheme=theme_light(),)
```


**Générations**
```{r}
km = survfit(Surv(dur,d)~gene, data=act)
# summary(km) 
km
plot(km)
ggsurvplot(km, ggtheme=theme_light(),)
```


### Test du log-rank (niveau de diplome)

Attention: sensible à l'hypothèse de risques proportionnels (constance des risks ratios dans le temps => cf modèle de Cox)
Hypothèse nulle : les fonctions de survie sont homogènes => par déduction rapports des risques toujours égaux à 1 / Hypothèse alternative: les fonctions de survie ne sont pas homogènes. 
La probabilité reportée (p-value) est appelée "risque de première espèce" 

Test conseillé: utiliser l'option ```rho=1```, pas sensible à la distribution des censures à  droite, dit test de **Peto-Peto**. 

```{r}
survdiff(Surv(dur,d)~diplome,data=act, rho=0)
survdiff(Surv(dur,d)~diplome,data=act, rho=1)
```


Si plus de deux modalités, il est pertinent de tester les fonctions de survie 2 à 2: fonction ```pairwise_survdiff``` (même syntaxe que ```surdiff```)

```{r}
pairwise_survdiff(Surv(dur,d)~diplome,data=act, rho=1)
```



### Comparaison des RMST (niveau de diplome)


RMST: Restricted mean of survival time.  

* Intéressant pour des démographes, on compare des espérances de survie (séjour) partielles.
* La durée est bornée au moment du dernier évènement observé. Lorsqu'on compare plusieurs courbes, on prend celle où la durée du dernier évènement est la plus courte.
* Encore peu diffusé (hélas) en  sciences sociales. 
* Défaut  de la fonction R:  créer une variable nommée *arm* identique à la variable discrete, mais codée (0,1).


Packgage ```survRM2``` indépendant de ```survival```.   
<br>
Exemple pour comparer les 2 premiers niveaux de diplome (inférieur au bac versus bac).

```{r}
rmst12=act[act$diplome!=3,]
rmst12$arm=ifelse(rmst12$diplome==1,1,0)
a=rmst2(rmst12$dur, rmst12$d, rmst12$arm)
print(a)
plot(a)
```


PS: *c'est la comparaison qui renvoyait un msg d'erreur mercredi après-midi. La fatigue a surement jouée son rôle, j'avais laissé la valeur 3 dans `ifelse` alors qu'il n'y avait plus d'obseravation pour cette modalité*.  

# Analyse semi-paramétrique: modèle à risques proportionnel de Cox

**Rappel**: l'hypothèse PH signifie que le rapport des risques est constant pendant la durée d'observation.

Avec une seule covariable X, un modèle à risque proportionnel s'écrit: 
$$h(t_i | X) = h_0(t_i)\times e^{b\times X}$$  


Soit 2 observations A et B. Le rapport des risques entre A et B s'écrit:  
$$\frac{h(t_i |X_A)}{h(t_i |X_B)}= \frac{e^{b\times X_A}}{e^{b\times X_b}}= e^{b\times (X_A-X_B)}$$


**Fonctions ```coxph``` ```coxzph``` ```survsplit```**

## Estimation

Penser à mettre les covariables en facteurs si nécessaire (ou ```factor(nom variable)``` dans le modèle) et prévoir les changements de références (fonction ```relevel```).  

```{r}
act$gene = as.factor(act$gene)
act$gene =  relevel(act$gene, ref = "2")
act$csp  = as.factor(act$csp)
act$csp  =  relevel(act$csp,  ref = "Cadres")
act$diplome  = as.factor(act$diplome)
act$diplome =  relevel(act$diplome,  ref = 2)
```

```{r}

coxfit = coxph(Surv(dur,d) ~  gene + csp + diplome, data=act)
summary(coxfit)
```

```{r}
ggforest(coxfit)
```

## Test de l'hypothèse de risques proportionnels


### Test sur les résidus de Schoenfeld

**v3 - test exact (gls)**: La fonction utilisée est `cox.zph`
**v2 - test simplifié (ols)** : la fonction utilisée est `cox.zphold` (à récupérer et à charger). Je continue de conseiller à utiliser cette version du test.

Le test peut utiliser plusieurs formes paramétriques de la durée. Par défaut la fonction utilise $f(t)=1-S(t)$, soit le complémentaire de l’estimateur de Kaplan-Meier (option ```transform=“km”```). Autres fonctions $f(t)=t$ (```transform=“identity”```). 

Avec la v2:   

```{r}
source("D:/D/Marc/SMS/FORMATIONS/2022/Durée2/a distribuer/cox.zphold.R")
```

```{r}
cox.zphold(coxfit)
cox.zphold(coxfit, transform="identity")
```

Avec la v3:  
```{r}
cox.zph(coxfit, terms=FALSE)
cox.zph(coxfit, terms=FALSE, transform="identity")
```



### Modèle de Cox et intéraction avec la durée

* Prérequis: les variables discrètes doivent être sous forme d'indicatrices (0,1). 
* Permet de modifier le modèle, de le présenter sans l'hypothèse de constance du rapport de risque et d'enrichir l'interprétation.
* Attention à l'interpétation du terme d'interaction, ce n'est pas un rapport de risque mais un rapport de rapports de risque.

On peut directement introduire cette intéraction, avec le choix de la paramétrisation de la durée, dans la fonction ```coxph```.  

```{r}
act$dipl1 = ifelse(act$diplome==1, 1,0)
# act$dipl2 = ifelse(act$diplome==2, 1,0) Pas nécessaire car c'est la référence
act$dipl3 = ifelse(act$diplome==3, 1,0)

coxfit2 = coxph(Surv(dur, d) ~ gene + csp + dipl1 + dipl3  + tt(dipl3), data = act, tt = function(x, t, ...) x*t)
summary(coxfit2)
```


## Introduction d'une variable dynamique 

On regardera le cas d'une variable de type binaire.     

Question: quel est l'effet de la naissance d'un (premier) enfant sur le risque de sortie de l'emploi?  

**Estimation du modèle en considérant la naissance comme  une variable fixe (variable enf)**  

```{r}
coxfit3 = coxph(Surv(dur, d) ~ gene + csp + diplome + enf, data = act)
summary(coxfit3)
```

### Retour sur l'estimation du modèle de Cox  

La base qui sert à l'estimation est splittée aux temps d'évènement.  
Pour transformer la base d'origine on utilise la fonction ```survsplit```. Au préalable on doit créer un vecteur donnant tous les temps d'évènement observés (fonction ```cut```).

**Récupération des durées d'évènement**

```{r}
cut= unique(act$dur[act$d == 1])
```

**Transformation de la base**  

La nouvelle base est nommée *tvc*. Il est nécessaire d'avoir une variable qui indique le début de l'intervalle de temps entre deux évènements (ici on va l'appelé *dur0*).    

```{r}
tvc = survSplit(data = act, cut = cut, end = "dur", start = "dur0", event = "d")
```

**Estimation du modèle** 

Avec R, lorsque la base est splittée, on ne renseigne pas la durée mais le début et la fin de chaque intervalle pour utiliser la fonction ```coxph```.   
On vérifie que le modèle estimé avec cette base splittée est identique au précédent.  

```{r}
coxfit = coxph(Surv(dur0, dur, d) ~ gene + csp + diplome + enf, data = tvc)
summary(coxfit3)
```

### Construction de la TVC

Comme on dispose de l'information sur l'âge à la naissance de l'enfant:  
Si *enfant*==1 & *age*>=*aanenf*, tvc=1, 0 sinon.  
L'âge de la répondante sur chaque année d'observation n'existe pas dans la base puisqu'on a une variable de durée. On doit construire cette variable pour comparer l'âge de la personne sur toute la période d'observation à l'âge à la naissance du premier enfant.    

```{r}
tvc$age= tvc$ageact + tvc$dur0
```

```{r}
tvc$tvc = tvc$enf
tvc$tvc = ifelse(tvc$tvc==1 & tvc$age>=tvc$aanenf,1,0)
head(tvc, n=12)
```

**Remarque: important**  
La naissance d'un enfant peut avoir lieu après la sortie d'activité. Cela pose un problème car avec les modèles de durée on stoppe l'observation après l'évènement. Par principe la cause précède toujours l'effet, mais dans ce cas on observe la cause après. Il y a un risque que l'estimation soir biaisée.   
Lorsque que la cause est observée avant l'évènement, on parle d'effet d'adaptation, lorsque la manifestation de la cause est observée après l'évènement on parle d'effet d'anticipation. Il n'en reste pas moins que la cause réelle est toujours antérieure à l'évènement, mais elle n'est pas observée. Certains modèles tente de résoudre ce problème, mais ils sont particulièrement complexes (et peu diffusés).   
On n'a pas ce problème avec l'impact des greffes (analyse transplantation), car l'évènement étudier est complètement absorbant (décès).


### Estimation du modèle  

```{r}
coxfit3 = coxph(Surv(dur0, dur, d) ~ gene + csp + diplome + tvc, data = tvc)
summary(coxfit3)
```




# Modèle (logistique) à temps discret

* Par définition ce n'est pas un modèle à risque proportionnel, mais à odds proportionnels. Toutefois en situation de rareté, l'Odds converge vers une probabilité, qui est une mesure du risque (ici une probabilité conditionnelle).
* Le modèle à temps discret est de type paramétrique.
* Il est moins contraignant que le modèle de Cox si l'hypothèse de proportionnalité n'est pas respectée, car le modèle est ajusté par une fonction de la durée.
* La base de données doit être transformée ici en format long (cf survsplit): aux temps d'observation ou sur des intervalles de temps.

Avec un lien logistique, le modèle à temps discret, avec seulement des covariables fixes, peut s'écrire:   

$$log\left[\frac{P(Y_t=1\ |\ Y_{t-1}=0,X_k)}{1-P(Y_t=1\ |\ Y_{t-1}=0,X_k)}\right]= a_0 + \sum_{p}a_pf(t_p)+\sum_{k}b_kX_k$$


## Transformation de la base


*Allongement de la base et variables d'analyse*

On va utiliser la fonction ```uncount``` du package ```tidyr``` qui va répliquer les observations selon la valeur de la variable de durée. 
Avant, on génère une variable mirroir de la variable *mois* qui sera supprimée avec l'exécution d'**`uncount`**, et une variable x=1 pour créer la variable de durée sous forme de compteur.  

```{r}
act$dur2 = act$dur
act$x=1
td = uncount(data=act,dur)
head(td, n=13)
```

*Variable de durée (compteur)*  

*Remarque: variante possible avec dplyr, je fais encore du R à l'ancienne*

```{r}
td$t = ave(td$x,td$ident, FUN=cumsum)
head(td, n=13)
```



*Variable évènement-censure*

On remplace les valeurs de la variable évènement/censure  *d* de sorte à ce que la sortie de l'emploi soit codée 0 avant la sortie effective .

```{r}
td$d[td$t<td$dur]=0
head(td, n=13)
```


## Parmamétrisation de la durée et Estimation du modèle

### Fonction continue de la durée

* $a_0 + \sum_{p}a_pf(t_p)$ sera la baseline du risque.
* Il faut trouver une fonction qui ajuste le mieux les données. Classiquement on utilise des polynomes d'ordre 1,2 ou 3 (dit "effet quadratique"). [Remarque sur la méthode des splines].
* On estime des modèles avec seulement la fonction de la durée, on peut utiliser le critère AIC ou BIC pour choisir le meilleur ajustement. La valeur la moins élevée donne le meilleur ajustement (la différence est significative à partir de -2).
* On estime ensuite le modèle avec les covariables sélectionnées.  

 
**Choix de la fonction** 
 
* $f(t)=a_1\times t$
* $f(t)= a_1\times t + a_2\times t^2$

```{r}
td$t2 = td$t^2
td$t3 = td$t^3
```


```{r}
fit1 = glm(d ~ t, data=td, family="binomial")
summ(fit1)
fit2 = glm(d ~ t + t2, data=td, family="binomial")
summ(fit2)
fit3 = glm(d ~ t + t2 + t3, data=td, family="binomial")
summ(fit3)
```

En comparant les critères d'information (ici AIC), le choix peut se porter sur la forme cubique.  

A savoir: la forme cubique n'est pas sans défaut (ou plus généralement des polynomes de dégré supérieur à 2), elle est sensible aux outliers, ce qui est le cas ici. Le graphique a été tronqué car le risque ne cesse d'augmenter jusqu'à une valeur proche de 1 au durée élevée.    
Il est préférable d'utiliser une méthode de lissage de type "spline cubique" moins violente (ne pas paniquer, c'est  même implémenté dans excel).
<br>


**Estimation du modèle**

```{r}
fit = glm(d ~ t + t2 + t3 + gene + csp + diplome, data=td, family="binomial")
summ(fit, digits=4)
```


### Forme discrète de la durée

* Il s'agit d'introduire la variable de durée dans le modèle comme une variable catégorielle (factor).
* Pas conseillé si beaucoup de points d'observation, ce qui est le cas ici, et surtout si présence de points d'observation sans évènement.
* A l'inverse, si peu de points d'observation, la paramétrisation avec une durée continue n'est pas conseillé.
* La correction de la non proportionnalité peut être plus compliquée (non traité).


(*exemple)
```{r, eval=F}
glm(d ~  factor(t) + gene  + csp + diplome, data=td, family="binomial")
```

On va supposer que l'on ne dispose que de 4 points d'observations. Pour l'exemple, on va créer ces points à partir des quartiles de la durée, et conserver pour chaque personne seulement une observation par intervalle.   

**Sélection de la dernière observation dans chaque intervalle**  
<br>

```{r}
td$ct4 = quantcut(td$t)
```

On va générer un compteur et un total d'observations en stratifiant *ident* + *ct4*

```{r}
td$n = ave(td$x,td$ident, td$ct4, FUN=cumsum)
td$N = ave(td$x,td$ident, td$ct4, FUN=sum)
```

On conserve la dernière observation dans la strate.

```{r}
td2 = subset(td, n==N)
```


**Estimation du modèle**

Ici la variable ct4 a été généré en format de type factor. Attention, si ce n'est pas le cas préciser le format dans le modèle ou le changer au préalable. 

```{r}
fit = glm(d ~ ct4 + gene + csp + diplome, data=td2, family=binomial)
summ(fit, digits=4)
```


*Probabilités estimées à partir du modèle avec la durée seulement*    

| Durées        | p     |                      
| ------------- | ------| 
| 0 à 6   ans   | 0.21  |
| 6 à 13  ans   | 0.31  |  
| 13 à 24 ans   | 0.20  | 
| 24 à 55 ans   | 0.17  |

Interprétation:   
Les risques (probabilités) sont estimés sur des intervalles assez long, leur valeur est donc plus élevées qu'avec des durées "continues": le risque de sortie de l'activité est de 21% jusqu'à 6 ans, toute chose égale par ailleurs.



# Risque concurrent

Le package est **`cmprsk`**. Les graphiques sont plutôt affreux, en particulier en raison de la position de la légende. La fonction, assez récente, *`ggcompetingrisks`* de `survminer` résoud le problème


## Incidence cumulée et test de gray

Le package est **`cmprsk`**. Les graphiques sont plutôt affreux, en particulier en raison de la position de la légende. La fonction, assez récente, *`ggcompetingrisks`* de `survminer` résoud le problème

```{r}
# ic et test de gray

act$typinact = as.factor(act$typinact)
ic = cuminc(act$dur, act$typinact)
ic
plot(ic)
ggcompetingrisks(fit = ic)
```

On compare les courbes en ajoutant l'option `groupe`, et ici on indique une version du test avec une pondération de type *Peto-Peto* avec `rho=1`. Pour le graphique avec `ggcompetingrisks` on a le choix entre avoir un graphique par valeur de la variable dont les valeurs sont comparées (graphique par défaut) ou un seul graphique avec les courbes empilées (option `multiple_panels = F`).  

<br>

Le résultat du test de Gray est affiché automatiquement avec l'option `group`.

```{r}
ic = cuminc(act$dur, act$typinact, group=act$gene, rho=1)
ic

ggcompetingrisks(fit = ic)
ggcompetingrisks(fit = ic, multiple_panels = F)
```


# Modèle multinomial

Bienvenue dans le monde de la librarie **`nnet`** et de la fonction très vieillissante **`multinom`**. 

```{r}
act$T = act$dur
td = uncount(act,T)  

td$gene = as.factor(td$gene)
td$gene =  relevel(td$gene, ref = "2")
td$csp  = as.factor(td$csp)
td$csp  =  relevel(td$csp,  ref = "Cadres")
td$diplome  = as.factor(td$diplome)
td$diplome =  relevel(td$diplome,  ref = 2)

td$typinact =  relevel(td$typinact, ref = "0")

td$x=1
td$t = ave(td$x, td$ident, FUN=cumsum)
td$t2 = td$t*td$t

td$e = ifelse(td$t<td$dur,0, td$typinact)

competfit = multinom(formula = e ~ t + t2 + gene + csp + diplome, data = td)
competfit
```

PS: toujours du mal à sortir proprement avec Quarto l'output en utilisant gtsummary (normalement ok dans un script). Mais l'output n'est pas top non plus, les $Yk$ sont empilées en ligne alors qu'il est préférable de les mettre en colonne.


# Mise en forme de la base

**Base additionnelle mef**

La base utilisée pour les analyses a été construite à partir d'une base individus-séquences. Pour obtenir les variables d'analyses (durée, évènement-censure) une mise en forme a été nécessaire. Il s'agit d'une méthode parmis d'autres, qui n'utilise que la base d'origine, et basée sur les comptages et doubles comptages des séquences pour conserver les informations nécessaires.    
<br>
Extrait de la base d'origine avec des situations types.  

```{r}
mef <- read.csv("D:/D/Marc/SMS/FORMATIONS/2022/Durée2/a distribuer/mef.csv")
head(mef, n=29)
```


* **ident=102**: Premier emploi à 16 ans, sortie définitive de l'emploi à 27 ans jusqu'à la retraite.  
* **ident=113**: La première séquence n'est pas l'emploi (études/formation pro). Premier emploi à 19 ans. Toujours en activité au moment de l'enquête.  
* **ident=127**: Premier emploi à 19 ans, suivi d'une période de chômage d'un an à l'âge de 26 ans. Toujours en activité depuis la reprise de l'emploi.   
* **ident=132**: Premier emploi à 17 ans, et a toujours travaillé jusqu'à la retraite. Etait déjà à la retraite au moment de l'enquête: retraite à 60 ans et enquête à 63 ans. 


## On conserve les premières séquences = emploi

On supprime la première séquence de *ident=113* comme le début de l'exposition est l'âge au premier emploi.  
Idée: on repère si la première séquence observée est un emploi. Si ce n'est pas le cas, on supprime la ligne (*tact=0*). 

```{r}
mef$act2 = ifelse(mef$act == 1, 1 , 0)
mef$tact = ave(mef$act2, mef$ident, FUN=cumsum)
mef = subset(mef, mef$tact>0)

mef$tact = NULL
```

## Age à la 1ere séquence d'inactivité: retraite et autres causes de sortie

Même principe, mais on devra faire un double comptage pour la situation où après une période d'activité succède  une période d'inactivité qui sera suivie d'une nouvelle séquence d'emploi, puis d'une nouvelle séquence de non emploi. C'est le cas pour *ident=127*. Avec **ttinact=1** on repère donc la première sortie de l'emploi.
  
```{r}
mef$inact = ifelse(mef$act != 1, 1 , 0)
mef$tinact = ave(mef$inact,  mef$ident, FUN=cumsum)
mef$ttinact = ave(mef$tinact, mef$ident, FUN=cumsum)
head(mef, n=29)
```

On reporte l'âge à la retraite si la retraite est la première séquence d'inactivité (ageinact avec act=7), ou l'âge à la sortie de l'emploi pour une autre cause (ageinact avec act différent de 7). 

```{r}
mef$ageret =   ifelse(mef$ttinact==1 & mef$act==7, mef$ageact,0) 
mef$ageinact = ifelse(mef$ttinact==1 & mef$act!=7, mef$ageact,0) 
head(mef, n=29)
```

On reporte les âges sur toutes les lignes en faisant un total, les âges avant la sortie étant toujours égaux à 0.

```{r}
mef$ageret   = ave(mef$ageret,   mef$ident, FUN=sum)
mef$ageinact = ave(mef$ageinact, mef$ident, FUN=sum)
head(mef, n=29)
```

## On conserve une ligne par individu

On génère un compteur sur les séquences, et on conserve seulement une ligne par personne.

```{r}
mef$x=1
mef$n = ave(mef$x, mef$ident, FUN=cumsum)
mef = subset(mef, mef$n==1)
mef = mef[c("ident","age_enq","ageact","act","ageret","ageinact")]
head(mef)
```

