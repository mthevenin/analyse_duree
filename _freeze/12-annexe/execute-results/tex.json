{
  "hash": "2304c07fb9c658d1b1ab1c7194bf4a0f",
  "result": {
    "markdown": "---\n\n---\n\n\n\n# Annexes\n\n\n## Tests Grambsch-Therneau OLS sur les résidus de Schoenfeld\n\n\n::: callout-important\nAttention il ne s'agit pas du test actuellement implémenté dans la nouvelle version de `survival` (v3) qui, malheureusement, lui a substitué la version dite *exacte* (moindres carrés généralisés). Le programme de la fonction  du test OLS est néanmoins facilement récupérable et exécutable. [lien](https://github.com/mthevenin/analyse_duree/blob/main/cox.zphold/cox.zphold.R).  \n\nJe continue de préconiser l'utilisation de cette version OLS du test, reproductible avec les autres applications statistiques (Stata,Sas,Python).\n:::\n\n* Le test dit \"simplifié\", qui n'apparait pas dans le texte original de P.Gramsch et T.Thernau [lien](https://www.jstor.org/stable/2337123#metadata_info_tab_contents), répond à un soucis d'instabilité des variances des résidus de Schoenfeld en fin de durée d'observation lorsque peu d'observation restent soumises au risque. Cet argument est soulevé dans leur ouvrage de 2022  [lien](https://link.springer.com/book/10.1007/978-1-4757-3294-8) avant d'en présenter sa version.\n* Il est simplifié car on applique à tous les résidus bruts la variance du paramètre ($b$) estimés par le modèle de Cox. \n* Le test devient alors un simple test de corrélation entre les résidus et une fonction de la durée (centrée). Dans l'esprit, il peut être également approché par une regression linéaire par les moindre carrés ordinaires entre les résidus et une fonction de la durée (voir page 134 de l'ouvrage de Grambsch et Therneau).\n\n\nSoit les données suivantes, avec *t* la variable de durées, *Y* la variable de censure et *X* la seule et unique covariable.\n\n* Pas d'évènement simultané (donc pas de correction de la vraisemblance)\n* Covariable de type indicatrice\n\n| $t_i$ | $Y_i$ | $X_i$ |\n|-----|-----|-----|\n| 1   | 1   | 1   |\n| 2   | 0   | 0   |\n| 3   | 0   | 0   |\n| 4   | 1   | 1   |\n| 5   | 1   | 1   |\n| 6   | 1   | 0   |\n| 7   | 0   | 1   |\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest = data.frame(time=  c(1,2,3,4,5,6,7),\n                    Y=c(1,0,0,1,1,1,0),\n                    X=     c(1,0,0,1,1,0,1))\n```\n:::\n\n\n\nEstimation du modèle de Cox:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(survival)\nfit = coxph(formula = Surv(time, Y) ~ X, data=test)\nfit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCall:\ncoxph(formula = Surv(time, Y) ~ X, data = test)\n\n    coef exp(coef) se(coef)    z     p\nX 0.6217    1.8622   1.1723 0.53 0.596\n\nLikelihood ratio test=0.31  on 1 df, p=0.5797\nn= 7, number of events= 4 \n```\n:::\n:::\n\n\n\nCalcul des résidus brut (si et seulement si $Y=1$) dans le cas d'une seule covariable avec $b$ égal à **0.62**:  \n\n$$rs_{i}=X_{i}- \\sum_{j\\in R_i}X_{i}\\frac{e^{0.62\\times X}}{\\sum_{j\\in R_i}e^{0.62\\times X}}= X_{i} - E(X_{j\\in R_i})$$\nIl y a ici 4 résidus à calculer, pour $t=(1,4,5,6)$   \n\n**Résidus pour $t=1$**    \n\n* $a_1= \\sum_{j\\in R_i}e^{0.62\\times X} = e^{0.62} + 1 + 1 + e^{0.62} + 1 + e^{0.62}= 10.43$\n* $b_1= \\sum_{j\\in R_i}X_{i}\\frac{e^{0.62\\times X}}{\\sum_{j\\in R_i}e^{0.62\\times X}} = 4\\times\\frac{e^{0.62}}{10.43} = 0.71$ \n* $r_1 = 1 - 0.71 = 0.29$\n\n**Résidus pour $t=4$**  \n\n* $a_4 = e^{0.62} + e^{0.62} + 1 + e^{0.62} = 6.58$\n* $b_4 =  4\\times\\frac{e^{0.62}}{6.58} = 0.84$ \n* $r_4 = 1 - 0.84 = 0.15$\n\n**Résidus pour $t=5$**  \n\n* $a_5 = e^{0.62} + e^{0.62} + 1 = 4.71$\n* $b_5 = 2\\times\\frac{e^{0.62}}{4.71} = 0.78$\n* $r_5 = 1 - 0.78 = 0.21$\n\n**Résidus pour $t=6$**  \n\n* $a_6 = e^{0.62} + 1 = 2.86$\n* $b_6 = \\frac{e^{0.62}}{2.86} = 0.65$\n* $r_6 = 0 - 0.65 = -0.65$\n\nLes résidus \"standardisés\", ou plutôt *scaled residuals* (je cale sur une traduction correcte en français) sont égaux à: \n\n$$sr_i = b + nd \\times Var(b) \\times r_i$$\n Avec $nd= \\sum Y_i$\n \n  \n* $\\sum Y_i = 4$\n* $Var(b) = (1.1723)^2=1.37$\n\n* $sr_1 = 0.62 + 4\\times 1.37 \\times 0.29 = 2.20$\n* $sr_4 = 0.62 + 4\\times 1.37 \\times 0.15 = 1.47$\n* $sr_5 = 0.62 + 4\\times 1.37 \\times 0.21 = 1.78$\n* $sr_6 = 0.62 + 4\\times 1.37 \\times (-0.65) = -2.95$\n\n\nAvec $g(t_i)$ une fonction de la durée ($g(t_i)=t_i$, $g(t_i)=1-KM(t_i)$...) et $\\overline{g(t)}$ sa valeur moyenne, la statistique  du test score simplifié pour une covariable est égale à :   \n\n$$\\frac{[\\sum_i(g(t_i) - \\overline{g(t_i)}\\times sr_i)]^2}{nd \\times Var(b) \\times (\\sum_i(g(t_i) - \\overline{g(t_i)})^2}$$\nEt suis un $\\chi^2$ à 1 degré de liberté.  \n\nAvec $\\overline{g(t_i)}=t_i$, le calcul de la statistique de test est:  \n\n*  $\\overline{g(t_i)}= \\frac{28}{7}=4$\n\n* $\\frac{[(1-4)\\times 2.20] + [(4-4)\\times 1.47 + (5-4)\\times 1.78 + (6-4)\\times (-2.95)]^2 }{4\\times 1.37 \\times [(1-4)^2 + (4-4)^2 + (5-4)^2 + (6-4)^2] } = \\frac{114.9}{76.72} = 1.49$\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#source(\"D:/D/Marc/SMS/FORMATIONS/analyse_duree/cox.zphold/cox.zphold.R\")\n\nsource(\"https://raw.githubusercontent.com/mthevenin/analyse_duree/master/cox.zphold/cox.zphold.R\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncox.zphold(fit, transform=\"identity\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     rho chisq     p\nX -0.688  1.49 0.222\n```\n:::\n:::\n",
    "supporting": [
      "12-annexe_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}