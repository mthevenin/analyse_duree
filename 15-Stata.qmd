---
jupyter: nbstata
---


# Stata


::: callout-note

* Le document a été compilé avec le magique kernel jupyter [**nbstata**](https://github.com/hugetim/nbstata) programmé par **Tim Huegerich**. Comparé à l'ancienne solution **statamarkdown** qui exécutait Stata en mode batch, il n'y a pas photo au niveau du runtime, avec pratiquement aucune latence une fois le noyau chargé (attendre une quinzaine de seconde à la première compilation).
* Le document n'a pas été compilé en PDF, seule cette version html est disponible.

:::

Ouverture de la base

```{stata}
*| message : false
*| warning : false

webuse set "https://raw.githubusercontent.com//mthevenin/analyse_duree/master/bases/"
webuse  "transplantation_m", clear
webuse set

list id year age surgery stime died in 1/10

```




## Analyse non paramétrique

### Méthode actuarielle

Contrairement à la formation, l'estimation sera faite sur des intervalles de 30 jours

```{stata}
ltable stime died, interval(30) graph ci
```



**Récupération des quartiles de la durée**  

Installation de la commande `qlt`
```{stata}
*| eval : false

net install qlt, from("https://raw.githubusercontent.com/mthevenin/analyse_duree/master/ado/qlt/") replace

* help qlt
```


```{stata}
qui ltable stime died, interval(30) saving(base, replace)
use base, clear
```



```{stata}
qlt
```


Avec la définition des bornes des intervalles de Sas

```{stata}
qlt, sas
```


### Méthode Kaplan-Meier

**Mode analyse des durées: stset**

Les données doivent être mises en mode analyse de durée avec la commande `stset` (`help stset`).

```{stata}
*| include: false
*| echo : false
*| message : false
*| warning : false

webuse set "https://raw.githubusercontent.com//mthevenin/analyse_duree/master/bases/"
webuse  "transplantation_m", clear
webuse set
```


A minima la commande `stset` entre la variable de durée en argument principal et la variable de censure/évènement avec `failure(nom_var)` en option. 

```{stata}
stset stime, f(died)

list id stime died _st _d _t _t0 in 1/10
```

**Estimation de la fonction de survie**  

La commande `sts list` permet d'afficher le tableau des estimations à chaque moment d'évènement


::: callout-note
Le tableau des estimateurs n'est reporté que pour le format htl du support
:::


::: {.content-visible when-format="html"}
```{stata}
sts list
```
:::


On récupére les quantiles de la durée avec `stci`. Par défaut la commande affiche la durée médiane. On peut choisir le quantile avec l'arguement p(valeur) en option

```{stata}
stci

stci, p(75)
stci, p(25)
```

Pour afficher le graphique des estimateurs KM, on utilise la commande **`sts graph`**. On ajoute ici l'affichage des intervalles de confiance avec l'option `ci`

```{stata}

sts graph, ci
```


Les commandes `sts list`, `stci` et `sts graph` permettent avec l'option `by(nom_variable)` d'obtenir des comparaisons entre groupes.


### Comparaison des fonctions de survie (KM)

On va comparer les fonctions de survie pour la variable *surgery*. 

**Graphique**

On ajoute l'option `by(surgery)` à la commande `sts graph`

```{stata}
sts graph, by(surgery) ci ci1opts(fc(stc1%40))  ci2opts(fc(stc2%40)) legend(pos(6))
```


**Tests du logrank** 

Fonction **`sts test`**. On affichera ici plusieurs variantes du test.

```{stata}
local test `" "l" "w" "tw" "p" "'
foreach test2 of local test {
sts test surgery, `test2'
}
```


*Comparaison des rmst*  

Installation de la commande **`strmst2`**

```{stata}
*| eval : false
ssc install strmst2
```

* Comparaison deux à deux (c'est pas plus mal comme cela). Je conseille de mettre les variables sous forme d'indicatrice.
* Les labels de la variable ne sont jamais reportés. Ils sont remplacés par les modalités arm0 et arm1.
* On peut changer la valeurs maximale de la durée avec l'option `tau(valeur)`.

arm1 = Opération  
arm0 = pas d'opération  

```{stata}
strmst2 surgery
```


## Modèles à risques proportionnels

### Modèle de Cox

#### Estimation du modèle

Commande **`stcox`**

Avec la correction d'Efron (conseillé)

**HR**:

```{stata}
stcox year age surgery, nolog noshow efron
```


**log(HR)**:

```{stata}
stcox year age surgery, nolog noshow efron nohr
```


#### Test de l'hypothèse PH

**Test Grambsch-Therneau sur les résidus de Schoenfeld**

Le test OLS est exécuté avec la commande **`estat phtest`**. Je conseille d'ajouté l'option detail pour récupéré les test à un degré de liberté, le test omnibus n'étant pas fiable.

Par défaut $f(t)=t$. 

```{stata}

* f(t)=t - par défaut 

estat phtest, detail


* f(t)= 1-km - solution par défaut de R
      
estat phtest, detail km

```


**Intéraction avec une fonction de la durée**

Avec $f(t)=t$

L'intéraction s'ajoute directement en option en indiquant la ou les variables concernées (une seule de préférence) avec l'option `tvc(nom_variable)` et la transformation de la durée (variable *t*) avec l'option `texp(expression)`. Ici on a choisi $ft(t)$ soit l'expression dans l'option `texp(_t)`


```{stata}
stcox year age surgery, nolog noshow efron nohr tvc(surgery) texp(_t)
```


#### Introduction d'une variable dynamique (binaire)


**Transformation de la base en format long aux temps d'évènement**  

*Etape 1*

```{stata}
stset stime, f(died) id(id)
```

*Etape 2*
```{stata}
stsplit, at(failure)

stset stime, f(died) id(id)
```

*Etape 3*
```{stata}
gen tvc = transplant==1 & wait<=_t
sort id _t
list id transplant wait tvc _d _t _t0 if id==10  , noobs


```

**Estimation du modèle**  

```{stata}
stcox year age surgery tvc, nolog noshow efron nohr

```

### Modèle  à durée discrète

Variable de durée = *mois*

#### Mise en forme de la base

```{stata}
*| include: false
*| echo : false
*| message : false
*| warning : false

webuse set "https://raw.githubusercontent.com//mthevenin/analyse_duree/master/bases/"
webuse  "transplantation_m", clear
webuse set
```



```{stata}

expand mois
bysort id: gen t=_n
gen e = died
replace e=0 if t<mois

list id year age surgery mois t e  in 1/31
```


#### Paramétrisation avec durée quantitative

Les critères d'information 

```{stata}

gen t2=t^2
gen t3=t^3

qui logit e  t ,  nolog 
estat ic

qui logit e  t t2 ,  nolog 
estat ic

qui logit e  t2 t3 ,  nolog 
estat ic
```


**Estimation du modèle**

```{stata}
qui sum year
qui gen year2 = year - `r(mean)'
qui sum age
qui gen age2 = age - `r(mean)'


logit e t t2 t3 year2 age2 surgery, nolog or
```


#### Paramétrisation avec durée discrète

Pour l'exemple seulement, on procède à un regroupement des intervalles découpés sur les quartiles de la durée


```{stata}
*| include: false
*| echo : false
*| message : false
*| warning : false

webuse set "https://raw.githubusercontent.com//mthevenin/analyse_duree/master/bases/"
webuse  "transplantation_m", clear
webuse set

expand mois
bysort id: gen t=_n
gen e = died
replace e=0 if t<mois
```



```{stata}
xtile ct4=t, n(4)
bysort id ct4: keep if _n==_N

tab  ct4 e
```


```{stata}
logit e i.ct4  year age surgery,  nolog or
```


## Modèles paramétriques

Juste un exemple pour le modèle de **weibull**

Commande **`streg`**


Par défaut, le modèle de Weibull est exécuté sous paramétrisation PH. Pour une paramétrisation type AFT, ajouter l'option *time*.

```{stata}
*| include: false
*| echo : false
*| message : false
*| warning : false

webuse set "https://raw.githubusercontent.com//mthevenin/analyse_duree/master/bases/"
webuse  "transplantation_m", clear
webuse set


qui stset stime, f(died)
```

**PH**: défaut

```{stata}
*qui stset stime, f(died) // penser à mettre la base en mode analyse de durée

streg year age surgery , dist(weibull) nolog noheader
```

**AFT**

```{stata}
streg year age surgery , dist(weibull) time nolog noheader
```



## Risques concurrents

### Non paramétrique: estimation des IC

Installer les commandes `stcompet` et `stcomlist` 

```{stata}
*| eval: FALSE

ssc install stcompet
ssc install stcomlist
```


Le risque d'intérêt est compet=1, le risque concurrent est compet=2. 
La commande externe **`stcompet`** permet d'estimer les CIF mais ne propose pas d'output des estimateurs ^[on doit cependant l'installer pour utiliser la commande suivante]. On utilise alors la commande **`stcomlist`** en précisant le ou les risques concurrent (ici compet=2)

 
```{stata}
stset stime, failure(compet==1)
stcomlist, compet1(2)
```


### Modèle multinomial à durée discrète

Rappel: Le modèle de Cox *cause-specific* s'excute facilement. Il suffit de passer la ou les causes concurrente en censure à droite. De même le modèle Fine-Gray (critiqué) est estimable avec la commande usine **`stcrreg`**

Attention le modèle modèle multinomial n'est pas directement relié aux CIF. Il permet néanmoins d'estimer des probabilités conditionnelles qui tiennent pleinement compte de concurrence entre les différentes issues.
Pour la variable de durée on utilise la variable *mois*

```{stata}
qui expand mois
qui bysort id: gen t=_n
qui gen t2=t*t

qui sum year
qui gen year2 = year - `r(mean)'
qui sum age
qui gen age2 = age - `r(mean)'

gen e = compet
replace e=0 if t<mois
mlogit e t t2 year2 age2 surgery, rrr noheader
```

